// Generated by Dagger (https://dagger.dev).
package com.nimeshpatel.readerapp.screens.details;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.nimeshpatel.readerapp.repository.BookRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class BookDetailViewModel_Factory implements Factory<BookDetailViewModel> {
  private final Provider<BookRepository> repositoryProvider;

  private final Provider<FirebaseFirestore> firebaseFireStoreProvider;

  private final Provider<FirebaseAuth> authProvider;

  public BookDetailViewModel_Factory(Provider<BookRepository> repositoryProvider,
      Provider<FirebaseFirestore> firebaseFireStoreProvider, Provider<FirebaseAuth> authProvider) {
    this.repositoryProvider = repositoryProvider;
    this.firebaseFireStoreProvider = firebaseFireStoreProvider;
    this.authProvider = authProvider;
  }

  @Override
  public BookDetailViewModel get() {
    return newInstance(repositoryProvider.get(), firebaseFireStoreProvider.get(), authProvider.get());
  }

  public static BookDetailViewModel_Factory create(Provider<BookRepository> repositoryProvider,
      Provider<FirebaseFirestore> firebaseFireStoreProvider, Provider<FirebaseAuth> authProvider) {
    return new BookDetailViewModel_Factory(repositoryProvider, firebaseFireStoreProvider, authProvider);
  }

  public static BookDetailViewModel newInstance(BookRepository repository,
      FirebaseFirestore firebaseFireStore, FirebaseAuth auth) {
    return new BookDetailViewModel(repository, firebaseFireStore, auth);
  }
}
